for (c in companies){
symbol <- c$symbol
url <- paste("http://openpse.com/api/quotes/?stocks=", symbol, "&from_date=", today-30, sep="" )
dat <- fromJSON(text_content(GET(url)))
ind <- length(dat)
print (length(dat))
if (ind > 15){
pchange2days <- (as.numeric(dat[[ind]]$price_close) - as.numeric(dat[[ind-2]]$price_close))/
as.numeric(dat[[ind]]$price_close)
pchange5days <- (as.numeric(dat[[ind]]$price_close)- as.numeric(dat[[ind-5]]$price_close))/
as.numeric(dat[[ind]]$price_close)
pchange10days <- (as.numeric(dat[[ind]]$price_close)- as.numeric(dat[[ind-10]]$price_close))/
as.numeric(dat[[ind]]$price_close)
print (c(symbol, pchange2days, pchange5days, pchange10days), sep=", ")
df <- rbind(df, data.frame("company" = symbol, "two.day" = pchange2days,
"five.day" = pchange5days, "ten.day" = pchange10days))
print (dat$quote_date)
}
}
library(ggplot2)
p <- ggplot(df, aes(x = (100*two.day), y = (100*five.day), label=company))
p + geom_point() + geom_text(size=3, hjust=-.25)
write.table(df, file = "df2.csv", sep = ",", row.names = FALSE)
dat
library(rjson)
library(httr)
companies <- fromJSON(text_content(GET("http://openpse.com/api/companies/?include_indices=1")))
for c in companies
companies
handle_reset("http://openpse.com/api/companies/?include_indices=1")
library(httr)
handle_reset("http://openpse.com/api/companies/?include_indices=1")
install.packages("devtools")
devtools::install_github("hadley/httr")
library(httr)
install.packages("httr")
handle_reset("http://openpse.com/api/companies/?include_indices=1")
companies <- fromJSON(text_content(GET("http://openpse.com/api/companies/?include_indices=1")))
library(rjson)
library(httr)
companies <- fromJSON(text_content(GET("http://openpse.com/api/companies/?include_indices=1")))
df <- data.frame("company" = as.character(), "two.day" = as.numeric(),
"five.day" = as.numeric(), "ten.day" = as.numeric())
today <- Sys.Date()
for (c in companies){
symbol <- c$symbol
url <- paste("http://openpse.com/api/quotes/?stocks=", symbol, "&from_date=", today-30, sep="" )
dat <- fromJSON(text_content(GET(url)))
ind <- length(dat)
print (length(dat))
if (ind > 15){
pchange2days <- (as.numeric(dat[[ind]]$price_close) - as.numeric(dat[[ind-2]]$price_close))/
as.numeric(dat[[ind]]$price_close)
pchange5days <- (as.numeric(dat[[ind]]$price_close)- as.numeric(dat[[ind-5]]$price_close))/
as.numeric(dat[[ind]]$price_close)
pchange10days <- (as.numeric(dat[[ind]]$price_close)- as.numeric(dat[[ind-10]]$price_close))/
as.numeric(dat[[ind]]$price_close)
print (c(symbol, pchange2days, pchange5days, pchange10days), sep=", ")
df <- rbind(df, data.frame("company" = symbol, "two.day" = pchange2days,
"five.day" = pchange5days, "ten.day" = pchange10days))
print (dat$quote_date)
}
}
library(ggplot2)
p <- ggplot(df, aes(x = (100*two.day), y = (100*five.day), label=company))
p + geom_point() + geom_text(size=3, hjust=-.25)
write.table(df, file = "df2.csv", sep = ",", row.names = FALSE)
companies <- fromJSON(text_content(GET("http://openpse.com/api/companies/?include_indices=1")))
shiny::runApp('Desktop/PSE project')
shiny::runApp('Desktop/Coursera/Developing Data Products/PHL Pop')
shiny::runApp('Desktop/PSE project')
shiny::runApp('Desktop/PSE project')
shiny::runApp('Desktop/PSE project')
shiny::runApp('Desktop/PSE project')
shiny::runApp('Desktop/PSE project')
shiny::runApp('Desktop/PSE project')
shiny::runApp('Desktop/PSE project')
shiny::runApp('Desktop/PSE project')
"SMPH", "TEL", "URC")
library(rjson)
library(httr)
psei <- c("AC", "AEV", "AGI", "ALI", "AP", "BDO", "BLOOM", "BPI", "DMC",
"EDC", "EMP", "FGEN", "GLO", "GTCAP", "ICT", "JFC", "JGS",
"LTG", "MBT", "MEG", "MER", "MPI", "PCOR", "RLC", "SCC", "SM", "SMC",
"SMPH", "TEL", "URC")
basuras <- c("")
companies <- fromJSON(text_content(GET("http://openpse.com/api/companies/?active_only=1")))
df <- data.frame("company" = as.character(), "date" = as.character(), "two.day" = as.numeric(),
"five.day" = as.numeric(), "ten.day" = as.numeric())
today <- Sys.Date()
for (c in companies){
symbol <- c$symbol
url <- paste("http://openpse.com/api/quotes/?stocks=", symbol, "&from_date=", today-30, sep="" )
dat <- fromJSON(text_content(GET(url)))
ind <- length(dat)
if (ind > 15){
pchange2days <- (as.numeric(dat[[ind]]$price_close) - as.numeric(dat[[ind-2]]$price_close))/
as.numeric(dat[[ind]]$price_close)
pchange5days <- (as.numeric(dat[[ind]]$price_close)- as.numeric(dat[[ind-5]]$price_close))/
as.numeric(dat[[ind]]$price_close)
pchange10days <- (as.numeric(dat[[ind]]$price_close)- as.numeric(dat[[ind-10]]$price_close))/
as.numeric(dat[[ind]]$price_close)
print (c(symbol, pchange2days, pchange5days, pchange10days), sep=", ")
df <- rbind(df, data.frame("company" = symbol, "date" =dat[[ind]]$quote_date,
"two.day" = pchange2days,"five.day" = pchange5days,
"ten.day" = pchange10days))
}
}
pseidf <- df[df$company %in% psei,]
library(ggplot2)
p <- ggplot(df, aes(x = (100*two.day), y = (100*five.day), label=company))
p + geom_point() + geom_text(size=3, hjust=-.25)
write.table(df, file = "df2.csv", sep = ",", row.names = FALSE)
save(df, "latestPSE2.Rda")
#
# library(googleVis)
# plot(
#     gvisScatterChart(df[, c("two.day","five.day")],
#                      options=list(
#                          explorer="{actions: ['dragToZoom',
#                                           'rightClickToReset'],
#                                 maxZoomIn:0.05}",
#                          chartArea="{width:'85%',height:'80%'}",
#                          hAxis="{title: 'Two Day % Change',
#                                titleTextStyle: {color: '#000000'}}",
#                          vAxis="{title: 'Five Day % Change',
#                                titleTextStyle: {color: '#000000'}}",
#                          title="Momentum Plot",
#                          width=550, height=500,
#                          legend="none"),
#                      chartid="ZoomZoom")
# )
#
# Scatter1 <- gvisScatterChart(df[, c("two.day","five.day")])
# plot(Scatter1)
shiny::runApp('Desktop/PSE project')
shiny::runApp('Desktop/PSE project')
shiny::runApp('Desktop/PSE project')
for (i in range(100)){
print (i)
}
for (i in range(1,100)){
print (i)
}
for (i in range(1:100)){
print (i)
}
for (i in range(1,100,1)){
print (i)
}
range(1,100)
range(1,1000)
range(1,1000,2)
range(1,1000,5)
1:100
rand <- random()
random.rand()
rand()
randint(1,3)
library(random)
help(rando)
help(random)
??random
install_packages("random")
install.packages("random")
library(random)
random()
?rando
?random
randomNUmbers()
runif()
runif(0,1)
runif(0,1)
runif(0,1)
runif(0,1)
runif(0,1)
runif(0,1)
runif(0,1.0)
runif(0,1.0)
runif(0,1.0)
runif(1000,0,1.0)
rand <- runif(1000,0,1.0)
rand[0]
rand[1]
rand[2]
rand <- runif(1000,0,1.0)
mylist <- c(120)
for (i in 1:1000){
temp <- mylist[length(mylist)]+rand[i]
mylist <- c(mylist, temp)
}
qplot(mylist)
library(ggplot2)
qplot(mylist)
ggplot(mylist)
plot(mylist)
plot(mylist, cex=0.2)
rand <- runif(1000,0,3.0)
mylist <- c(120)
for (i in 1:1000){
temp <- mylist[length(mylist)]+rand[i]
mylist <- c(mylist, temp)
}
mylist <- c(mylist, 0)
plot(mylist)
rand <- runif(1000,0,3.0)
mylist <- c(120)
for (i in 1:1000){
temp <- mylist[length(mylist)]+rand[i]
mylist <- c(mylist, temp)
}
mylist <- c(mylist, 0)
plot(mylist, pch=1)
rand <- runif(1000,0,3.0)
mylist <- c(120)
for (i in 1:1000){
temp <- mylist[length(mylist)]+rand[i]
mylist <- c(mylist, temp)
}
mylist <- c(mylist, 0)
plot(mylist, type='l')
rand <- runif(1000,0,3.0)
mylist <- c(120)
for (i in 1:1000){
temp <- mylist[length(mylist)]+rand[i]
mylist <- c(mylist, temp)
}
mylist <- c(mylist, 0)
plot(mylist, type='o')
rand <- runif(1000,0,1.5)
mylist <- c(120)
for (i in 1:1000){
temp <- mylist[length(mylist)]+rand[i]
mylist <- c(mylist, temp)
}
mylist <- c(mylist, 0)
plot(mylist, type='pl')
rand <- runif(1000,0,1.5)
mylist <- c(120)
for (i in 1:1000){
temp <- mylist[length(mylist)]+rand[i]
mylist <- c(mylist, temp)
}
mylist <- c(mylist, 0)
plot(mylist, type='b,c')
rand <- runif(1000,0,1.5)
mylist <- c(120)
for (i in 1:1000){
temp <- mylist[length(mylist)]+rand[i]
mylist <- c(mylist, temp)
}
mylist <- c(mylist, 0)
plot(mylist, type='l')
rand <- runif(1000,0,3)
mylist <- c(120)
for (i in 1:1000){
temp <- mylist[length(mylist)]+rand[i]
mylist <- c(mylist, temp)
}
mylist <- c(mylist, 0)
plot(mylist, type='l')
rand <- runif(1000,-3,3)
mylist <- c(120)
for (i in 1:1000){
temp <- mylist[length(mylist)]+rand[i]
mylist <- c(mylist, temp)
}
mylist <- c(mylist, 0)
plot(mylist, type='l')
rand <- runif(1000,-1,3)
mylist <- c(120)
for (i in 1:1000){
temp <- mylist[length(mylist)]+rand[i]
mylist <- c(mylist, temp)
}
mylist <- c(mylist, 0)
plot(mylist, type='l')
rand <- runif(1000,-1.,3.)
mylist <- c(120)
for (i in 1:1000){
temp <- mylist[length(mylist)]+rand[i]
mylist <- c(mylist, temp)
}
mylist <- c(mylist, 0)
plot(mylist, type='l')
rand <- runif(1000,-2.0,2.5)
mylist <- c(120)
for (i in 1:1000){
temp <- mylist[length(mylist)]+rand[i]
mylist <- c(mylist, temp)
}
mylist <- c(mylist, 0)
plot(mylist, type='l')
mylist
library(ggplot2)
rand <- runif(1000,-2.0,2.5)
mylist <- c(120)
for (i in 1:1000){
temp <- mylist[length(mylist)]+rand[i]
mylist <- c(mylist, temp)
}
mylist <- c(mylist, 0)
ggplot(mylist)
library(ggplot2)
rand <- runif(1000,-2.0,2.5)
mylist <- c(120)
for (i in 1:1000){
temp <- mylist[length(mylist)]+rand[i]
mylist <- c(mylist, temp)
}
mylist <- c(mylist, 0)
qplot(1:1000,mylist)
library(ggplot2)
rand <- runif(1000,-2.0,2.5)
mylist <- c(120)
for (i in 1:1000){
temp <- mylist[length(mylist)]+rand[i]
mylist <- c(mylist, temp)
}
mylist <- c(mylist, 0)
qplot(mylist)
mylist
shiny::runApp('Desktop/PSE project')
library(xlsx)
df <- read.xlsx(filename, 1)
filename <- "/Users/erikafille/Downloads/twittercodeddatafile/CompleteTwitterCoded.xlsx"
df <- read.xlsx(filename, 1)
df <- data.frame(Twitter=3647332, Blogs=3222832, News=3987342)
barplot(df)
df
barplot(as.matrix(df))
date: 20 April 2015
2010 PH Population Map
detects the context of a given phrase.
install.packages(c("dplyr", "ggplot2", "googleVis", "gplots", "RCurl", "rjson", "spatial", "swirl", "tidyr"))
install.packages(c("dplyr", "ggplot2", "googleVis", "gplots",
)
install.packages(c("dplyr", "ggplot2", "googleVis", "gplots", "RCurl", "rjson", "spatial", "swirl", "tidyr"))
install.packages(c("dplyr", "ggplot2", "googleVis", "gplots",
c
install.packages("RCulr")
install.packages("RCurl")
install.packages("RCurl")
install.packages("RCurl")
setwd("~/Documents/Capstone Project/FinalProject")
shiny::runApp()
shiny::runApp()
sessionINfo()
sessionInfo()
library("shinyapps")
sessionInfo()
install.packages("rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
options(shinyapps.http.trace = TRUE)
deployApp(appName="courseracapstone", account="pilotgtec")
sessionInfo()
indices <- readRDS("indexedterms.RDS")
write.csv(indices, "indexedterms.csv")
twogram <- readRDS("twogram.RDS")
threegram <- readRDS("threegram.RDS")
fourgram <- readRDS("fourgram.RDS")
write.csv(twogram, "twogram.csv")
write.csv(threegram, "threegram")
write.csv(threegram, "threegram.csv")
write.csv(fourgram, "fourgram.csv")
write.csv(fourgram, "fourgram.csv", row.names=FALSE)
write.csv(threegram, "threegram.csv", row.names=FALSE)
write.csv(twogram, "twogram.csv", row.names=FALSE)
write.csv(indices, "indexedterms.csv", row.names=FALSE)
indices <- read.csv("indexedterms.csv")
twogram <- read.csv("twogram.csv")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
statement
statement <- "i want to"
head(fourgram)
getwords <- function(statement,indices, fourgram, threegram, twogram){
statement <- process(statement)
#words <- strsplit(statement, "\\s+")
words <- strsplit(statement, " ")
nwords <- sapply(words, length)
predictions <- predict(nwords, statement, words, indices, fourgram,
threegram, twogram)
predictions <- clean(predictions)
#if (length(grep("^puppy*", predictions)) > 0){
if ("puppy*" %in% predictions){
comment <- "- puppy* is used as a placeholder for predicted
profane words."
} else{
comment <- ""
}
statement <- paste(words[[1]], collapse=" ")
results <- list( "statement" = statement, "words" = words,
"wordsize" = nwords,
"predictions"=predictions, "comment" = comment)
return(results)
}
myres <- getwords(statement, indices, fourgram, threegram, twogram)
process <- function(statement){
## convert all to lower
statement <- tolower(statement)
## replace
statement <- gsub("'s", "xxss", statement)
statement <- gsub("'t", "xxtt", statement)
statement <- gsub("'m", "xxmm", statement)
statement <- gsub("'ll", "xxll", statement)
statement <- gsub("'ve", "xxve", statement)
statement <- gsub("'re", "xxre", statement)
statement <- gsub("(^[[:space:]]+|[[:space:]]+$)", "", statement)
##remove punctuations
statement <- gsub('[[:punct:]]','',statement)
return(statement)
}
clean <- function(predictions){
for (p in predictions){
if(length(profaneWords[profaneWords$V1 == p,]) != 0){
#if( length(grep( paste("^", p, "$", sep=""), profaneWords$V1 )) != 0 ){
predictions <- gsub(p, "puppy*", predictions)
}
}
return (predictions)
}
predict <- function(nwords, statement, words, indices, fourgram, threegram, twogram){
if (nwords >= 3){
findme <- paste(as.character(tail(words[[1]], 3)), collapse=" ")
#matchIndices <- grep(findme, fourgram$Input)[1:5]
matchIndices <- as.numeric(rownames(fourgram[fourgram$Input == findme,]))
if (length(matchIndices)>4){
matchIndices <- matchIndices[1:5]
}
predictions <- indices$Term[fourgram$NextID[matchIndices]]
if (length(predictions) == 0){
#if (sum(is.na(predictions))==5){
findme <- paste(as.character(tail(words[[1]], 2)), collapse=" ")
#matchIndices <- grep(findme, threegram$Input)[1:5]
matchIndices <- as.numeric(rownames(threegram[threegram$Input == findme,]))
if (length(matchIndices)>4){
matchIndices <- matchIndices[1:5]
}
predictions <- indices$Term[threegram$NextID[matchIndices]]
if (length(predictions) == 0){
#if (sum(is.na(predictions))==5){
findme <- paste(as.character(tail(words[[1]], 1)), collapse=" ")
#matchIndices <- grep(findme, twogram$Input)[1:5]
matchIndices <- as.numeric(rownames(twogram[twogram$Input == findme,]))
if (length(matchIndices)>4){
matchIndices <- matchIndices[1:5]
}
predictions <- indices$Term[twogram$NextID[matchIndices]]
if (length(predictions) == 0){
#if (sum(is.na(predictions))==5){
predictions <- indices$Term[1:5]
}
}
}
} else if (nwords == 2){
findme <- statement
#matchIndices <- grep(findme, threegram$Input)[1:5]
matchIndices <- as.numeric(rownames(threegram[threegram$Input == findme,]))
if (length(matchIndices)>4){
matchIndices <- matchIndices[1:5]
}
predictions <- indices$Term[threegram$NextID[matchIndices]]
if (length(predictions) == 0){
#if (sum(is.na(predictions))==5){
findme <- paste(as.character(tail(words[[1]], 1)), collapse=" ")
#matchIndices <- grep(findme, twogram$Input)[1:5]
matchIndices <- as.numeric(rownames(twogram[twogram$Input == findme,]))
if (length(matchIndices)>4){
matchIndices <- matchIndices[1:5]
}
predictions <- indices$Term[twogram$NextID[matchIndices]]
if (length(predictions) == 0){
#if(sum(is.na(predictions))==5){
predictions <- indices$Term[1:5]
}
}
} else{
findme <- statement
#matchIndices <- grep(findme, twogram$Input)[1:5]
matchIndices <- as.numeric(rownames(twogram[twogram$Input == findme,]))
if (length(matchIndices)>4){
matchIndices <- matchIndices[1:5]
}
predictions <- indices$Term[twogram$NextID[matchIndices]]
if (length(predictions) == 0){
#if(sum(is.na(predictions))==5){
predictions <- indices$Term[1:5]
}
}
predictions <- predictions[!is.na(predictions)]
predictions
}
myres <- getwords(statement, indices, fourgram, threegram, twogram)
profaneWords <- read.table("badwords.txt")
myres <- getwords(statement, indices, fourgram, threegram, twogram)
myres
class(myres)
as.character(predictions)
class(myres$predictions)
myres$predictions <-as.character( myres$predictions)
myres$predictions
statement
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
